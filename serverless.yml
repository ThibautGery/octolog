# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: octolog

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 15

  stage: dev
  region: ap-southeast-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-2:754380202678:table/peoples"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-2:754380202678:table/experiences"

functions:
  updateBasics:
    handler: lambda/basics.update
    events:
      - http:
          path: people/{id}/basics
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
  getBasics:
    handler: lambda/basics.get
    events:
      - http:
          path: people/{id}/basics
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  getExperience:
    handler: lambda/experiences.get
    events:
      - http:
          path: experiences/{id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  updateExperience:
    handler: lambda/experiences.update
    events:
      - http:
          path: experiences/{id}
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  createExperience:
    handler: lambda/experiences.create
    events:
      - http:
          path: people/{id}/experiences
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  getExperiences:
    handler: lambda/experiences.getAll
    events:
      - http:
          path: people/{id}/experiences
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
  syncOctoExperiences:
    handler: lambda/octopod.sync
    environment:
      CLIENT_ID: ${env:OCTOPOD_CLIENT_ID}
      CLIENT_SECRET: ${env:OCTOPOD_CLIENT_SECRET}
    events:
      - http:
          path: people/{id}/octopod/sync
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
resources:
  Resources:

    staticContent:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: peoples
        AttributeDefinitions:
          - AttributeName: trigram
            AttributeType: S
        KeySchema:
          - AttributeName: trigram
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    experiencesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: experiences
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    cdn:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName:
              Fn::GetAtt: [ staticContent, DomainName ]
            Id: myS3Origin
            S3OriginConfig: {}
          Enabled: true
          DefaultRootObject: index.html
          Aliases:
          - log.octo.com.au
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: myS3Origin
            ViewerProtocolPolicy: allow-all
          PriceClass: PriceClass_All
    dns:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: Z3D9NL1GYN6KC0
        RecordSets:
        - Name: "log.octo.com.au"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            DNSName:
              Fn::GetAtt: [ cdn, DomainName ]


plugins:
  - serverless-offline

package:
  exclude:
    - tmp/**
    - .git/**
    - DynamoDBLocal.jar
    - DynamoDBLocal_lib/**
    - coverage/**
    - shared-local-instance.db
    - client
