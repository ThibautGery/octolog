# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: octolog

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 15
  stackTags:
    octolog: ${self:provider.stage} # useful to create AWS group
  stage: dev
  region: ap-southeast-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-2:754380202678:table/peoples"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:ap-southeast-2:754380202678:table/experiences"

functions:
  updateBasics:
    handler: lambda/basics.update
    events:
      - http:
          path: people/{id}/basics
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
  getBasics:
    handler: lambda/basics.get
    events:
      - http:
          path: people/{id}/basics
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
                
  deleteBasics:
    handler: lambda/basics.delete
    events:
      - http:
          path: people/{id}/basics
          method: delete
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  getExperience:
    handler: lambda/experiences.get
    events:
      - http:
          path: experiences/{id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  updateExperience:
    handler: lambda/experiences.update
    events:
      - http:
          path: experiences/{id}
          method: put
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  createExperience:
    handler: lambda/experiences.create
    events:
      - http:
          path: people/{id}/experiences
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  getExperiences:
    handler: lambda/experiences.getAll
    events:
      - http:
          path: people/{id}/experiences
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
  syncOctoExperiences:
    handler: lambda/octopod.sync
    environment:
      CLIENT_ID: ${env:OCTOPOD_CLIENT_ID}
      CLIENT_SECRET: ${env:OCTOPOD_CLIENT_SECRET}
    events:
      - http:
          path: people/{id}/octopod/sync
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true
  syncBasics:
    handler: lambda/askbob.sync
    environment:
      API_KEY: ${env:ASKBOB_API_KEY}
    events:
      - http:
          path: people/{id}/askbob/sync
          method: post
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                id: true

  backupDb:
    handler: lambda/tech/backup.backup
    events:
      - schedule: rate(12 hours)
    environment:
      BACKUP_BUCKET: ${self:resources.Resources.backup.Properties.BucketName}

resources: ${file(./ops/cloud-formation.yml)}

plugins:
  - serverless-offline

package:
  exclude:
    - tmp/**
    - .git/**
    - DynamoDBLocal.jar
    - DynamoDBLocal_lib/**
    - coverage/**
    - shared-local-instance.db
    - client
